[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 656
PlayResY: 480

[Aegisub Project Garbage]
Audio File: ../../../视频/Winter School on Cryptography 2012 - Lattice-Based Cryptography/01-Introduction to Lattice/2012-01-Introduction to Lattice - Part I.mp4
Video File: ../../../视频/Winter School on Cryptography 2012 - Lattice-Based Cryptography/01-Introduction to Lattice/2012-01-Introduction to Lattice - Part I.mp4
Video AR Mode: 4
Video AR Value: 1.366667
Video Zoom Percent: 1.000000
Scroll Position: 209
Active Line: 226
Video Position: 59762

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,5,5,7,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,{\pos(327.487,33.333)}听写：ScaleresTalk成长会听力狂练小组成员
Dialogue: 0,0:00:05.00,0:00:10.00,Default,,0,0,0,,{\pos(327.487,33.333)}April、@蓝梦水冰凌、@小小草-华吕燕、Erin
Dialogue: 0,0:00:10.00,0:00:15.00,Default,,0,0,0,,{\pos(327.487,33.333)}海绵、Quesera、宁宁、花臂、流水
Dialogue: 0,0:00:15.00,0:00:20.00,Default,,0,0,0,,{\pos(327.487,33.333)}@译员小将Summers、Ogloo、Confetti、@Arthur-韩亚非
Dialogue: 0,0:00:20.00,0:00:25.00,Default,,0,0,0,,{\pos(327.487,33.333)}Nini、@Doris_素丹、Freya、Lily
Dialogue: 0,0:00:25.00,0:00:30.00,Default,,0,0,0,,{\pos(327.487,33.333)}翻译、压制：@刘巍然-学酥
Dialogue: 0,0:00:30.00,0:00:35.00,Default,,0,0,0,,{\pos(327.487,33.333)}校对：@Scalers，@MorningW
Dialogue: 0,0:00:35.00,0:00:40.00,Default,,0,0,0,,{\pos(327.487,33.333)}时间轴：@MorningW、@刘巍然-学酥
Dialogue: 0,0:00:00.00,0:00:06.75,Default,,0,0,0,,早上好 感谢主办方的邀请
Dialogue: 0,0:00:06.75,0:00:11.21,Default,,0,0,0,,感谢主办方为此次活动提供的大力支持
Dialogue: 0,0:00:11.21,0:00:14.30,Default,,0,0,0,,我估计随着讲座的进行 大家可能会更感谢演讲的老师们
Dialogue: 0,0:00:14.30,0:00:16.00,Default,,0,0,0,,总之 非常感谢
Dialogue: 0,0:00:17.44,0:00:22.04,Default,,0,0,0,,我们今天早上以什么为开场呢
Dialogue: 0,0:00:22.52,0:00:28.06,Default,,0,0,0,,我将从学术的角度为大家讲一讲这一领域的历史进程
Dialogue: 0,0:00:28.67,0:00:32.38,Default,,0,0,0,,有关格的简短介绍
Dialogue: 0,0:00:33.68,0:00:38.04,Default,,0,0,0,,后面大家可以看到 我们的讲座速度非常快
Dialogue: 0,0:00:38.04,0:00:41.20,Default,,0,0,0,,而且讲座的内容比较深入
Dialogue: 0,0:00:42.49,0:00:47.02,Default,,0,0,0,,所以 我认为第一个讲座应该是以“简介”为主题
Dialogue: 0,0:00:47.02,0:00:51.42,Default,,0,0,0,,希望大家都能够理解格是什么 如果有问题 大家随时可以打断我
Dialogue: 0,0:00:51.42,0:00:55.34,Default,,0,0,0,,好像很多朋友是从很远的地方过来听讲座的
Dialogue: 0,0:00:55.34,0:00:57.60,Default,,0,0,0,,有来自美国的 来自加拿大的
Dialogue: 0,0:00:57.60,0:01:00.36,Default,,0,0,0,,所以如果你觉得要睡着了 就告诉同桌把你叫起来
Dialogue: 0,0:01:00.36,0:01:03.36,Default,,0,0,0,,不过我会试着讲得有意思些 这样大家都不会睡着
Dialogue: 0,0:01:03.36,0:01:11.34,Default,,0,0,0,,但是从这些时区来的朋友们 让大家不睡着可能有点困难
Dialogue: 0,0:01:11.34,0:01:17.05,Default,,0,0,0,,这个冬令营的主题是什么？
Dialogue: 0,0:01:17.05,0:01:20.98,Default,,0,0,0,,主题是格和格在密码学中的应用
Dialogue: 0,0:01:20.98,0:01:25.12,Default,,0,0,0,,我们先来讲一讲格是什么
Dialogue: 0,0:01:25.12,0:01:30.73,Default,,0,0,0,,我想大家要首先了解的是 格是什么？
Dialogue: 0,0:01:30.73,0:01:33.69,Default,,0,0,0,,可能有些朋友根本没有听说过这个名词
Dialogue: 0,0:01:33.69,0:01:38.32,Default,,0,0,0,,这里有一个例子 这是在某个区域里有规律的图形
Dialogue: 0,0:01:38.32,0:01:43.60,Default,,0,0,0,,这就是格 这其实是卷心菜 不过表示的是同一个东西
Dialogue: 0,0:01:43.60,0:01:48.25,Default,,0,0,0,,它们都按照某种模式而规律排布
Dialogue: 0,0:01:48.25,0:01:50.41,Default,,0,0,0,,这种规律排布卷心菜的方式就是格
Dialogue: 0,0:01:51.12,0:01:52.52,Default,,0,0,0,,这个例子也一样
Dialogue: 0,0:01:52.52,0:01:56.88,Default,,0,0,0,,所以我们有两种表示方法了 卷心菜 或者格
Dialogue: 0,0:01:56.88,0:01:58.34,Default,,0,0,0,,这更像是格了
Dialogue: 0,0:01:58.34,0:01:59.04,Default,,0,0,0,,什么是格？
Dialogue: 0,0:01:59.04,0:02:04.70,Default,,0,0,0,,格是高维空间中的点集
Dialogue: 0,0:02:04.70,0:02:07.32,Default,,0,0,0,,这是一个3维空间
Dialogue: 0,0:02:08.04,0:02:11.58,Default,,0,0,0,,且点的排布呈周期性规律
Dialogue: 0,0:02:11.58,0:02:15.80,Default,,0,0,0,,这是3维空间格的一个例子
Dialogue: 0,0:02:15.80,0:02:19.98,Default,,0,0,0,,但这实际上不能称之为格 因为这里点的数量并不是无穷多的
Dialogue: 0,0:02:19.98,0:02:21.87,Default,,0,0,0,,不过这个图能把格的意思表达出来
Dialogue: 0,0:02:22.83,0:02:26.76,Default,,0,0,0,,我这里不会详细讲解格的定义
Dialogue: 0,0:02:26.76,0:02:31.56,Default,,0,0,0,,我们会在讲座的第二个小时详细讲解 这里只是给大家一个概念
Dialogue: 0,0:02:32.48,0:02:34.32,Default,,0,0,0,,格可以形式化地定义为这样的形式
Dialogue: 0,0:02:34.32,0:02:37.37,Default,,0,0,0,,格是按照这种方式定义的点集
Dialogue: 0,0:02:37.37,0:02:42.24,Default,,0,0,0,,我们在R^n中选择n个线性无关的向量
Dialogue: 0,0:02:42.24,0:02:46.04,Default,,0,0,0,,然后我们选取这些向量的全部整数组合而构成的点集
Dialogue: 0,0:02:46.04,0:02:48.57,Default,,0,0,0,,幻灯片上是一个格的例子
Dialogue: 0,0:02:49.39,0:02:57.48,Default,,0,0,0,,我选择了v_1和v_2 这是两个向量 然后我选取它们的全部整数组合
Dialogue: 0,0:02:57.48,0:03:02.43,Default,,0,0,0,,举例来说 我们有2v_2, v_1+v_2, 2v_1
Dialogue: 0,0:03:02.43,0:03:06.08,Default,,0,0,0,,我们也可以选择负数 比如-v_2 这个点没在图里面
Dialogue: 0,0:03:06.08,0:03:10.91,Default,,0,0,0,,但实际上 点集会遍布整个空间 遍布所有方向
Dialogue: 0,0:03:10.91,0:03:15.04,Default,,0,0,0,,很显然 (0, 0)这个0点永远包含在格点中
Dialogue: 0,0:03:15.04,0:03:18.00,Default,,0,0,0,,我想大家可以从图中对格有个直观感觉了
Dialogue: 0,0:03:18.00,0:03:20.86,Default,,0,0,0,,这些都是这两个向量的整数组合
Dialogue: 0,0:03:20.86,0:03:25.96,Default,,0,0,0,,所形成的点集有点像网格 我们把这称为格
Dialogue: 0,0:03:25.96,0:03:29.63,Default,,0,0,0,,有些人会把这两个点称为基
Dialogue: 0,0:03:29.63,0:03:33.18,Default,,0,0,0,,点集v_1,v_2,…,v_n是L的基
Dialogue: 0,0:03:33.18,0:03:37.77,Default,,0,0,0,,这个定义很像向量的线性生成空间 只不过我们这里只选取整数组合
Dialogue: 0,0:03:37.77,0:03:40.57,Default,,0,0,0,,我们通过这种方式得到了规律点集的形式化描述
Dialogue: 0,0:03:40.57,0:03:45.32,Default,,0,0,0,,在第一个小时我不会讲的特别深入
Dialogue: 0,0:03:45.32,0:03:50.24,Default,,0,0,0,,我们来讲一讲为什么格在密码学中有如此重要的地位
Dialogue: 0,0:03:51.40,0:03:56.17,Default,,0,0,0,,举例来说 我们选择这两个向量 这样更形象些
Dialogue: 0,0:03:56.17,0:03:58.48,Default,,0,0,0,,我们选择这两个向量 v_1和v_2
Dialogue: 0,0:03:58.48,0:04:01.90,Default,,0,0,0,,然后想一想这两个向量生成的格是什么
Dialogue: 0,0:04:01.90,0:04:03.92,Default,,0,0,0,,一眼看上去 你可能会觉得
Dialogue: 0,0:04:03.92,0:04:10.38,Default,,0,0,0,,v_1+v_2是一个特别长的向量 和原点离得很远 所生成格的形状可能很奇怪
Dialogue: 0,0:04:10.38,0:04:16.49,Default,,0,0,0,,但实际上如果你仔细思考一下的话 就会发现这才是所生成的格
Dialogue: 0,0:04:16.49,0:04:23.20,Default,,0,0,0,,对比开始时想象的结果 你可能会觉得很惊奇 所生成的格点可以离原点这么近
Dialogue: 0,0:04:23.20,0:04:25.21,Default,,0,0,0,,但实际上向量是可以相减的
Dialogue: 0,0:04:25.21,0:04:33.05,Default,,0,0,0,,你可以计算3v_2-4v_1 你就会得到这个和原点距离非常近的点
Dialogue: 0,0:04:33.45,0:04:41.93,Default,,0,0,0,,这就是格之所以如此有用的一个原因 因为即使基向量很长…
Dialogue: 0,0:04:41.93,0:04:44.30,Default,,0,0,0,,我想给大家讲解的是 格的基向量并不是唯一的
Dialogue: 0,0:04:44.30,0:04:47.31,Default,,0,0,0,,格基并不是唯一的 这是格的另一个性质
Dialogue: 0,0:04:48.32,0:04:54.30,Default,,0,0,0,,v_1'和v_2'这两个向量也是同样一个格的基
Dialogue: 0,0:04:55.98,0:04:57.72,Default,,0,0,0,,这在密码学中有很重要的作用
Dialogue: 0,0:04:57.72,0:05:06.41,Default,,0,0,0,,大家在后面也能看到 我们可以试着用格基隐藏格原本的结构特性
Dialogue: 0,0:05:06.41,0:05:11.37,Default,,0,0,0,,我可以不给你v_1'和v_2' 我可以给你v_1和v_2
Dialogue: 0,0:05:14.54,0:05:16.28,Default,,0,0,0,,来看看格的历史
Dialogue: 0,0:05:16.28,0:05:19.07,Default,,0,0,0,,这里是研究格的数学家先驱们
Dialogue: 0,0:05:19.07,0:05:20.92,Default,,0,0,0,,照片上他们看起来好像很不开心 我也不知道为什么
Dialogue: 0,0:05:20.92,0:05:25.40,Default,,0,0,0,,最近数学家的照片看起来会开心些 可能是因为格理论有了些进展
Dialogue: 0,0:05:31.21,0:05:39.74,Default,,0,0,0,,历史上 在19世纪早期 人们主要是从数论的角度、从数学角度研究格
Dialogue: 0,0:05:39.74,0:05:43.23,Default,,0,0,0,,人们关注各格的数论方面性质 而不是格的应用
Dialogue: 0,0:05:43.23,0:05:49.20,Default,,0,0,0,,1801年高斯开始研究格 然后是Hermit、Minkowski
Dialogue: 0,0:05:49.20,0:05:54.62,Default,,0,0,0,,我认为Minkowski在格的研究方面做出了突出的贡献
Dialogue: 0,0:05:54.62,0:05:59.68,Default,,0,0,0,,甚至今天大家都可以学习到Minkowski的研究成果了 也就是Minkowski定理
Dialogue: 0,0:05:59.68,0:06:04.12,Default,,0,0,0,,他们当时关注的是不同的问题 并没有关注密码学应用
Dialogue: 0,0:06:04.97,0:06:07.40,Default,,0,0,0,,但这个定理直到现在都有重要的应用价值
Dialogue: 0,0:06:07.40,0:06:09.32,Default,,0,0,0,,所以Gauss、Hermite和Minkowski
Dialogue: 0,0:06:09.32,0:06:13.18,Default,,0,0,0,,他们是格领域主要的数学家们 我们今天会看到他们的一些成果
Dialogue: 0,0:06:14.94,0:06:19.79,Default,,0,0,0,,近期 在20世纪 我们会看到新一代的数学家们给出了新的研究成果
Dialogue: 0,0:06:19.79,0:06:24.11,Default,,0,0,0,,近期学者们提出了一个非常重要的研究成果 我认为每个人都应该学习这个成果
Dialogue: 0,0:06:24.11,0:06:29.47,Default,,0,0,0,,这个成果叫LLL算法 3L算法 或者叫L立方算法
Dialogue: 0,0:06:29.47,0:06:31.64,Default,,0,0,0,,是Lenstral、Lenstral和Louvasz提出的
Dialogue: 0,0:06:31.64,0:06:33.90,Default,,0,0,0,,这是他们三个的照片 他们三个看起来开心点了
Dialogue: 0,0:06:33.90,0:06:36.43,Default,,0,0,0,,不知道大家看不看得出来 照片里好像挺冷的 但是他们还是挺开心
Dialogue: 0,0:06:36.43,0:06:40.38,Default,,0,0,0,,我也不知道他们谁是谁
Dialogue: 0,0:06:40.38,0:06:44.78,Default,,0,0,0,,但这确实是1982年的照片 照片中的三个人分别是两个Lenstras和Louvasz
Dialogue: 0,0:06:44.78,0:06:48.01,Default,,0,0,0,,他们在一起研究这个算法时拍摄的
Dialogue: 0,0:06:48.01,0:06:50.92,Default,,0,0,0,,这个算法的结果非常令人惊异
Dialogue: 0,0:06:51.56,0:06:56.08,Default,,0,0,0,,如果你以前从来都不知道这个算法也没关系 明天每个人都会学习到这个算法
Dialogue: 0,0:06:56.08,0:06:58.40,Default,,0,0,0,,Vadim会为大家讲解这个算法
Dialogue: 0,0:06:59.66,0:07:02.51,Default,,0,0,0,,这个算法非常令人惊异
Dialogue: 0,0:07:03.24,0:07:14.83,Default,,0,0,0,,这个算法最开始用于寻找格中的近似最短向量 当然我们现在也会这么用
Dialogue: 0,0:07:14.83,0:07:16.41,Default,,0,0,0,,我们后面会看到近似最短向量是什么意思
Dialogue: 0,0:07:16.41,0:07:21.50,Default,,0,0,0,,本质上说 这个算法可以用来寻找离原点比较近的一个格向量
Dialogue: 0,0:07:21.50,0:07:29.79,Default,,0,0,0,,但实际上 这个算法最初被用于在实数域分解多项式
Dialogue: 0,0:07:30.91,0:07:38.98,Default,,0,0,0,,以及在固定维度下解决整数规划问题 这是Lenstra在后面的论文中提出的
Dialogue: 0,0:07:38.98,0:07:43.20,Default,,0,0,0,,这个算法在整数分解问题上具有重要应用价值 什么叫在实数域分解多项式呢？
Dialogue: 0,0:07:43.20,0:07:48.41,Default,,0,0,0,,就是把一个多项式分解为低阶的多项式 并且是在实数上进行分解
Dialogue: 0,0:07:48.41,0:07:50.57,Default,,0,0,0,,另一个应用领域是下面这个
Dialogue: 0,0:07:50.57,0:07:54.25,Default,,0,0,0,,我们现在也可以在类似Maple的数学工具中做这样的运算
Dialogue: 0,0:07:54.25,0:07:56.40,Default,,0,0,0,,假设我们计算得到了一个数
Dialogue: 0,0:07:56.40,0:08:01.21,Default,,0,0,0,,经过了很长时间的计算 你最后得到了一个数：6.73205…
Dialogue: 0,0:08:01.21,0:08:02.83,Default,,0,0,0,,你估计会觉得这可能是个很特殊的数
Dialogue: 0,0:08:02.83,0:08:06.51,Default,,0,0,0,,可能是某个数的平方根 或者是某个数的立方根
Dialogue: 0,0:08:06.51,0:08:08.59,Default,,0,0,0,,大家觉得呢？这个数是不是看起来挺熟悉的？
Dialogue: 0,0:08:08.59,0:08:12.11,Default,,0,0,0,,实际上这是个非常简单的例子 大家可能知道结果是什么
Dialogue: 0,0:08:15.29,0:08:20.51,Default,,0,0,0,,这个数等于√3+5
Dialogue: 0,0:08:20.51,0:08:21.74,Default,,0,0,0,,这是个非常简单的例子
Dialogue: 0,0:08:21.74,0:08:25.79,Default,,0,0,0,,我们可以使用LLL算法来实现这样的功能
Dialogue: 0,0:08:25.79,0:08:29.63,Default,,0,0,0,,实际上我们可以在任意数上做这样的操作
Dialogue: 0,0:08:29.63,0:08:33.26,Default,,0,0,0,, 你只需要输入一个数 算法就会告诉你它可能是哪些数运算得来的
Dialogue: 0,0:08:33.26,0:08:38.56,Default,,0,0,0,,上周我就一直在做计算 并最后得到了一个非常复杂的数
Dialogue: 0,0:08:38.56,0:08:42.54,Default,,0,0,0,,但后来我发现这个数实际上等于√5+4 结果挺让人开心的
Dialogue: 0,0:08:42.54,0:08:47.58,Default,,0,0,0,,这就是LLL算法的另一个重要应用
Dialogue: 0,0:08:47.58,0:08:49.80,Default,,0,0,0,,大家可能想知道这是怎么做到的 不过我们现在要看看其他的内容了
Dialogue: 0,0:08:53.23,0:08:54.14,Default,,0,0,0,,继续往下
Dialogue: 0,0:08:56.46,0:09:00.75,Default,,0,0,0,,这是一些历史知识 这是1982年的事情
Dialogue: 0,0:09:01.98,0:09:09.28,Default,,0,0,0,,最近 学者们意识到格在密码学中有重要的应用价值 这也是我们冬令营的主题
Dialogue: 0,0:09:09.28,0:09:15.70,Default,,0,0,0,,当开始讨论密码学时 大家时差综合症就要犯了 因为有点理论…
Dialogue: 0,0:09:15.70,0:09:21.77,Default,,0,0,0,,什么是密码学？密码学是一个很大的领域
Dialogue: 0,0:09:21.77,0:09:24.65,Default,,0,0,0,,我认为密码学对于电子商务很重要…
Dialogue: 0,0:09:24.65,0:09:27.61,Default,,0,0,0,,密码学被用在生活中的方方面面 比如信用卡、护照、手机、互联网等等
Dialogue: 0,0:09:27.61,0:09:29.07,Default,,0,0,0,,密码学的重要程度不用我过多强调了吧
Dialogue: 0,0:09:29.93,0:09:35.45,Default,,0,0,0,,绝大多数系统都是基于RSA密码学系统的
Dialogue: 0,0:09:36.25,0:09:46.96,Default,,0,0,0,,这是Rivest、Shamir、Adleman在1977年提出的 他们发明了这个密码学系统
Dialogue: 0,0:09:46.96,0:09:51.28,Default,,0,0,0,,我们一直还在使用这样的密码学系统
Dialogue: 0,0:09:51.28,0:09:56.01,Default,,0,0,0,,基于格的密码学系统从某方面讲 将成为密码学系统的另一种选择
Dialogue: 0,0:09:56.01,0:09:59.96,Default,,0,0,0,,我们将在接下来的4天时间里让大家了解到这一点
Dialogue: 0,0:09:59.96,0:10:05.40,Default,,0,0,0,,格密码学有成为另一种选择的潜力 也是一个好的备选方案
Dialogue: 0,0:10:05.40,0:10:10.18,Default,,0,0,0,,我们将在接下来的4天时间里为大家讲解这一观点 希望大家能认同这一观点
Dialogue: 0,0:10:11.24,0:10:15.58,Default,,0,0,0,,很显然 有很多理由支持我们转入基于格的密码学系统
Dialogue: 0,0:10:15.58,0:10:21.45,Default,,0,0,0,,这就是RSA密码学系统 我后面还会提到
Dialogue: 0,0:10:21.45,0:10:30.94,Default,,0,0,0,,如果我没记错的话 密码学和格第一次牵手 是在LLL算法提出没多久以后
Dialogue: 0,0:10:30.94,0:10:35.84,Default,,0,0,0,,人们想 我们现在有密码学算法了 也有LLL算法了 我们可以做一些很棒的事情
Dialogue: 0,0:10:35.84,0:10:41.04,Default,,0,0,0,,没准我们可以用LLL算法破解密码学方案 或者用于对密码学方案进行分析
Dialogue: 0,0:10:41.04,0:10:46.59,Default,,0,0,0,,实际上 即使现在 密码分析学也是LLL算法的一个重要应用领域
Dialogue: 0,0:10:46.59,0:10:53.38,Default,,0,0,0,,它可以作为一个密码分析学算法 用于破解密码学方案 给出方案应用方法的建议
Dialogue: 0,0:10:53.38,0:10:57.37,Default,,0,0,0,,举例来说 LLL算法可以破解基于背包问题的密码学系统
Dialogue: 0,0:10:57.37,0:11:01.60,Default,,0,0,0,,这是Lagarias和Odlyzko在1985年提出的
Dialogue: 0,0:11:01.60,0:11:04.38,Default,,0,0,0,,最近 LLL算法可以破解RSA的变种方案
Dialogue: 0,0:11:04.38,0:11:08.81,Default,,0,0,0,,Blömer做出了杰出的工作 还有Hastad和Coppersmith
Dialogue: 0,0:11:08.81,0:11:16.28,Default,,0,0,0,,如果你在特定的配置环境下使用RSA算法 则可证明应用LLL算法可以破解RSA
Dialogue: 0,0:11:16.28,0:11:18.19,Default,,0,0,0,,这是一个非常棒的研究成果
Dialogue: 0,0:11:18.19,0:11:21.16,Default,,0,0,0,,这个领域也有很多分支
Dialogue: 0,0:11:21.16,0:11:24.57,Default,,0,0,0,,我今天并不会过多讲解这方面的内容
Dialogue: 0,0:11:24.57,0:11:27.04,Default,,0,0,0,,估计在后面Vidim会讲解 这的确是一个很棒的成果
Dialogue: 0,0:11:27.04,0:11:31.88,Default,,0,0,0,,在冬令营中我要讲解的内容更正能量一些
Dialogue: 0,0:11:31.88,0:11:40.08,Default,,0,0,0,,我们要讲解如何构造密码学方案 如何应用格来构造密码学方案
Dialogue: 0,0:11:43.32,0:11:47.92,Default,,0,0,0,,学者们在20世纪90年代中期意识到了这一点
Dialogue: 0,0:11:47.92,0:11:56.48,Default,,0,0,0,,1996年Ajtai首先进行了尝试 这个想法非常令人惊奇 是突破性的想法
Dialogue: 0,0:11:56.48,0:12:07.40,Default,,0,0,0,,这就是冬令营的主题 如何使用格代数结构 使用格计算问题构造密码学方案
Dialogue: 0,0:12:07.40,0:12:13.64,Default,,0,0,0,,如何构造公钥密码学方案 或者构造其他密码学函数 构造很多其它的密码学方案
Dialogue: 0,0:12:13.64,0:12:19.08,Default,,0,0,0,,这是1996年开创的领域 Ajtai首先进行了尝试
Dialogue: 0,0:12:19.08,0:12:21.23,Default,,0,0,0,,为什么我们关心这个领域呢？
Dialogue: 0,0:12:21.23,0:12:24.78,Default,,0,0,0,,为什么我们要用格来构造密码学方案呢？
Dialogue: 0,0:12:24.78,0:12:27.84,Default,,0,0,0,,这是我在第一小时的简介中要为大家介绍的内容
Dialogue: 0,0:12:27.84,0:12:38.04,Default,,0,0,0,,事实证明 格密码学有很多整数分解或者离散对数等传统假设不具有的特性
Dialogue: 0,0:12:39.04,0:12:43.37,Default,,0,0,0,,格的安全性更高
Dialogue: 0,0:12:43.37,0:12:46.38,Default,,0,0,0,,我们现在在考虑数学证明 但是首先我们要注意
Dialogue: 0,0:12:46.38,0:12:49.20,Default,,0,0,0,,我们不能证明所有的方案都是安全的
Dialogue: 0,0:12:49.20,0:12:53.21,Default,,0,0,0,,无法证明基于一系列NP问题构造的密码学方案就一定是安全的
Dialogue: 0,0:12:53.21,0:13:00.49,Default,,0,0,0,,但我们可以证明 这些密码学方案的安全性与其他一些问题是等价的
Dialogue: 0,0:13:00.49,0:13:03.66,Default,,0,0,0,,方案安全性与格的特定困难问题等价 而且我们相信这些困难问题确实很难
Dialogue: 0,0:13:03.66,0:13:07.08,Default,,0,0,0,,在后面几页幻灯片中我会讲到这一点
Dialogue: 0,0:13:07.69,0:13:15.13,Default,,0,0,0,,另一个很棒的特性是 格密码学方案可以抵御量子计算机的攻击
Dialogue: 0,0:13:15.13,0:13:23.88,Default,,0,0,0,,现在可能绝大多数人已经知道 量子计算机可以解决整数分解问题
Dialogue: 0,0:13:23.88,0:13:28.96,Default,,0,0,0,,量子计算机可以解决离散对数问题 可以整数分解 量子计算机可以破解密码学方案
Dialogue: 0,0:13:28.96,0:13:31.24,Default,,0,0,0,,量子计算机还可以做很多其他的事情
Dialogue: 0,0:13:31.24,0:13:37.93,Default,,0,0,0,,我想说的是 其他可以抵御量子计算机攻击的候选算法中
Dialogue: 0,0:13:37.93,0:13:40.60,Default,,0,0,0,,格密码学可以排在很高的地位 可能可以排在最高的地位
Dialogue: 0,0:13:40.60,0:13:46.18,Default,,0,0,0,,这也是为什么我们要研究它的一个原因
Dialogue: 0,0:13:46.81,0:13:48.72,Default,,0,0,0,,我们现在还没有量子计算机
Dialogue: 0,0:13:48.72,0:13:53.10,Default,,0,0,0,,这仍然是未来才可能出现的东西 科学家们仍然在尝试构造量子计算机
Dialogue: 0,0:13:53.10,0:13:58.91,Default,,0,0,0,,但如果你想构造一个10年内安全的密码学方案 你应该需要开始担心量子计算机了
Dialogue: 0,0:13:59.55,0:14:04.08,Default,,0,0,0,,我们知道 我们可能在10至12年之内将得到量子计算机 所以我们需要担心这一点
Dialogue: 0,0:14:05.32,0:14:11.24,Default,,0,0,0,,对于我们现在发送的一些数据 我们至少需要在10年内保证加密的安全性
Dialogue: 0,0:14:11.24,0:14:14.60,Default,,0,0,0,,所以我们现在就应该开始担心量子计算机的诞生了
Dialogue: 0,0:14:14.60,0:14:18.33,Default,,0,0,0,,这很严峻 因为我们没有太多的备选密码学方案
Dialogue: 0,0:14:18.33,0:14:22.56,Default,,0,0,0,,如果你了解量子计算机的最新研究进展情况的话
Dialogue: 0,0:14:22.56,0:14:23.98,Default,,0,0,0,,你会知道我们没有太多的备选方案
Dialogue: 0,0:14:23.98,0:14:26.49,Default,,0,0,0,,但是我们又不得不依靠密码学来实现一些功能
Dialogue: 0,0:14:26.49,0:14:33.84,Default,,0,0,0,,我们需要使用密码学来在网上使用我们的信用卡 使用网上银行什么的
Dialogue: 0,0:14:33.84,0:14:36.43,Default,,0,0,0,,所以我们需要一些备选密码学方案
Dialogue: 0,0:14:36.43,0:14:38.76,Default,,0,0,0,,而格密码学是抵御量子计算机攻击的备选密码学方案
Dialogue: 0,0:14:39.37,0:14:43.56,Default,,0,0,0,,我在后面会提到格密码学的另一个优点
Dialogue: 0,0:14:43.56,0:14:49.04,Default,,0,0,0,,在某些情况下 格密码学的运算速度比较快 并且格密码学可以提供更多的功能
Dialogue: 0,0:14:49.04,0:14:54.70,Default,,0,0,0,,这是近几年才提出的成果 我在后面几页幻灯片中会讲到
Dialogue: 0,0:14:54.70,0:14:59.02,Default,,0,0,0,,我们大致讲了讲为什么我们要研究格密码学
Dialogue: 0,0:14:59.02,0:15:03.98,Default,,0,0,0,,现在 我们尝试高屋建瓴地看看 如何使用格构造密码学方案
Dialogue: 0,0:15:03.98,0:15:06.92,Default,,0,0,0,,为什么格可以用来构造密码学方案
Dialogue: 0,0:15:06.92,0:15:12.10,Default,,0,0,0,,简单来说 假定我们有这样一个格
Dialogue: 0,0:15:12.10,0:15:14.03,Default,,0,0,0,,我们一般使用高维格 不是这种格
Dialogue: 0,0:15:14.03,0:15:19.02,Default,,0,0,0,,这是个2维格 我们一般使用更高维度的格 比如500维的格
Dialogue: 0,0:15:19.02,0:15:24.57,Default,,0,0,0,,基本思想是 如果我们随机选择一个格点 比如这个点
Dialogue: 0,0:15:24.57,0:15:26.97,Default,,0,0,0,,然后我进行扰乱 把点移动到这里
Dialogue: 0,0:15:26.97,0:15:29.84,Default,,0,0,0,,我选择了一个格点 把它往下移动了一些
Dialogue: 0,0:15:29.84,0:15:37.05,Default,,0,0,0,,现在 从计算角度很难得知这个点是否从这个格点移动来的
Dialogue: 0,0:15:37.05,0:15:39.58,Default,,0,0,0,,很难得知这个点是从哪个格点移动来的
Dialogue: 0,0:15:39.58,0:15:41.42,Default,,0,0,0,,在2维格中 这个问题看起来比较简单
Dialogue: 0,0:15:41.42,0:15:45.92,Default,,0,0,0,,但如果是500维格的话 我们可以沿着很多方向移动 向上 向下…
Dialogue: 0,0:15:45.92,0:15:50.89,Default,,0,0,0,,在高维中我们可以有很多移动方向
Dialogue: 0,0:15:50.89,0:15:54.09,Default,,0,0,0,,这就是格问题困难度的来源
Dialogue: 0,0:15:54.09,0:15:56.89,Default,,0,0,0,,实话实说 大家在后面的几个讲座中可能看不到这些困难问题
Dialogue: 0,0:15:56.89,0:16:03.50,Default,,0,0,0,,因为现在这些困难问题都被进一步封装 使得其可以更好地应用于密码学方案中
Dialogue: 0,0:16:03.50,0:16:07.55,Default,,0,0,0,,比如SIS问题 LWE问题 后面的几个讲座中大家可以学习到
Dialogue: 0,0:16:07.55,0:16:18.06,Default,,0,0,0,,实际构造时可能用不到这个问题 不过这是格密码学构造的基本思想
Dialogue: 0,0:16:18.06,0:16:27.44,Default,,0,0,0,,我们来更深入的讲一讲 格密码学有什么优点？
Dialogue: 0,0:16:29.64,0:16:33.36,Default,,0,0,0,,我前面说到 第一个优点是可证明安全
Dialogue: 0,0:16:33.36,0:16:40.59,Default,,0,0,0,,现在 我们在构造密码学方案时 一般会伴随一个特定的安全性证明
Dialogue: 0,0:16:40.59,0:16:43.94,Default,,0,0,0,,这个安全性证明指出 如果你能破解密码学方案
Dialogue: 0,0:16:43.94,0:16:49.21,Default,,0,0,0,,如果你能破解公钥加密的私钥 或者可以对单向函数求逆
Dialogue: 0,0:16:49.21,0:16:53.52,Default,,0,0,0,,即使破解的概率非常低 几乎可以忽略 也会发生很奇特的事情
Dialogue: 0,0:16:53.52,0:16:57.80,Default,,0,0,0,,如果能破解密码学方案 你也就可以解决格中的困难问题了
Dialogue: 0,0:16:57.80,0:17:05.98,Default,,0,0,0,,这非常好 这实际上告诉我们在构造密码学方案时 我们没有漏掉一些构造细节
Dialogue: 0,0:17:05.98,0:17:09.95,Default,,0,0,0,,我们没有留下安全缺口或者脆弱性漏洞
Dialogue: 0,0:17:09.95,0:17:16.78,Default,,0,0,0,,我们可以证明如果方案被破解了 就会发生奇特的事情
Dialogue: 0,0:17:17.37,0:17:21.93,Default,,0,0,0,,这非常好 在传统密码学中 我们不一定能得到安全性证明
Dialogue: 0,0:17:21.93,0:17:23.28,Default,,0,0,0,,有些时候我们能证明安全性
Dialogue: 0,0:17:23.28,0:17:27.58,Default,,0,0,0,,但是即使RSA系统 我们不知道是不是破解RSA一定意味着可以解决整数分解问题
Dialogue: 0,0:17:28.62,0:17:32.12,Default,,0,0,0,,有的密码学方案具备这样的特性 并不是所有的密码学方案都有这个特性
Dialogue: 0,0:17:32.12,0:17:39.00,Default,,0,0,0,,但在格密码学中 最近10年左右的方案构造 都可以得到安全性证明
Dialogue: 0,0:17:40.54,0:17:42.32,Default,,0,0,0,,这就是第一个优点了
Dialogue: 0,0:17:42.32,0:17:48.78,Default,,0,0,0,,格密码学与传统密码学的第二个对比点是 格密码学所得到的安全性更高
Dialogue: 0,0:17:48.78,0:17:50.65,Default,,0,0,0,,这一点我会在下一页幻灯片中详细讲解
Dialogue: 0,0:17:50.65,0:17:54.14,Default,,0,0,0,,这个优点非常好 叫做最糟糕困难安全性
Dialogue: 0,0:17:54.14,0:18:01.08,Default,,0,0,0,,这是格中所独有的优点 在其他代数结构中似乎都没有这个优点
Dialogue: 0,0:18:01.08,0:18:04.12,Default,,0,0,0,,这是个非常棒的优点 我会在下面两页幻灯片中详细讲解
Dialogue: 0,0:18:04.12,0:18:08.81,Default,,0,0,0,,这个优点的意思是如果你可以破解密码学算法
Dialogue: 0,0:18:08.81,0:18:13.39,Default,,0,0,0,,那么你就可以解决最糟糕情况困难问题 你可以对任意格解决一个困难问题
Dialogue: 0,0:18:13.39,0:18:18.91,Default,,0,0,0,,在下一页幻灯片中我还会提到 传统密码学是没有这个特点的
Dialogue: 0,0:18:18.91,0:18:22.08,Default,,0,0,0,,传统密码学的安全性一般基于平均情况困难问题
Dialogue: 0,0:18:22.08,0:18:24.38,Default,,0,0,0,,下一页幻灯片中我会讲解这一特性的重要性
Dialogue: 0,0:18:24.38,0:18:25.82,Default,,0,0,0,,这是一个非常棒的优点
Dialogue: 0,0:18:25.82,0:18:30.49,Default,,0,0,0,,这也是为什么Ajtai在20世纪90年代中期的工作得到了这么广泛的关注
Dialogue: 0,0:18:30.49,0:18:36.41,Default,,0,0,0,,这是一个新的思想 是一个新的特性 这个特性很奇特
Dialogue: 0,0:18:37.52,0:18:43.74,Default,,0,0,0,,这个优点中可能包含一些我自己的主观判断 对我来说这是格密码学的一个优点
Dialogue: 0,0:18:43.74,0:18:45.77,Default,,0,0,0,,与整数分解相比 这是一个相对较新的困难问题
Dialogue: 0,0:18:45.77,0:18:53.98,Default,,0,0,0,,如果把数学家的工作考虑进来的话 这个困难问题已经有200年的历史了
Dialogue: 0,0:18:53.98,0:18:58.54,Default,,0,0,0,,但在计算机科学领域 这个困难问题只有30年的历史 是个新提出的困难问题
Dialogue: 0,0:18:59.38,0:19:04.03,Default,,0,0,0,,另一个优点是格困难问题不能被量子算法解决
Dialogue: 0,0:19:04.03,0:19:07.80,Default,,0,0,0,,我们对这个困难问题很有信心
Dialogue: 0,0:19:07.80,0:19:10.18,Default,,0,0,0,,这确实是一个很困难的问题 我们可以基于它构造密码学方案
Dialogue: 0,0:19:11.52,0:19:14.17,Default,,0,0,0,,到现在为止 量子算法还不能解决这些困难问题
Dialogue: 0,0:19:14.17,0:19:17.31,Default,,0,0,0,,当然我不知道是不是一定不能解决
Dialogue: 0,0:19:17.31,0:19:20.50,Default,,0,0,0,,寻找解决格困难问题的量子算法是个很重要的公开问题
Dialogue: 0,0:19:20.50,0:19:26.12,Default,,0,0,0,,学者们已经寻找了15年 到现在为止还是没有能解决格困难问题
Dialogue: 0,0:19:26.12,0:19:32.27,Default,,0,0,0,,所以可能格问题确实很困难 可能即使在量子算法下 格问题仍然很困难
Dialogue: 0,0:19:33.74,0:19:37.77,Default,,0,0,0,,我还要提到的一个优点是
Dialogue: 0,0:19:37.77,0:19:48.30,Default,,0,0,0,,如果使用基于整数分解的密码学系统 此类方案经常要进行乘法、指数运算
Dialogue: 0,0:19:48.30,0:19:51.07,Default,,0,0,0,,这类运算的计算开销对于笔记本来说并不大
Dialogue: 0,0:19:51.07,0:20:00.59,Default,,0,0,0,,但对于小型设备 比如智能卡 乘法和指数运算这类运算的计算开销就比较大了
Dialogue: 0,0:20:00.59,0:20:03.10,Default,,0,0,0,,对于格密码学来说 很棒的一个特性是
Dialogue: 0,0:20:03.10,0:20:07.74,Default,,0,0,0,,格密码学的计算开销很小 只涉及到加法运算 只是进行一系列加法运算
Dialogue: 0,0:20:07.74,0:20:17.53,Default,,0,0,0,,特别是最近几年 学者们提出了很多非常高效的格密码学方案
Dialogue: 0,0:20:17.53,0:20:23.53,Default,,0,0,0,,这实在是令人惊讶 不需要做太多运算 只是一系列加法运算就能实现密码学方案
Dialogue: 0,0:20:23.53,0:20:29.29,Default,,0,0,0,,所以即使从效率的角度考虑 格密码学也具有巨大的优势
Dialogue: 0,0:20:29.29,0:20:38.73,Default,,0,0,0,,最后一个优点是我的同事Vadim、Chris和Craig发现的
Dialogue: 0,0:20:38.73,0:20:46.33,Default,,0,0,0,,我们可以用格实现其他令人惊讶的密码学功能 比如全同态加密
Dialogue: 0,0:20:46.33,0:20:50.08,Default,,0,0,0,,Craig会在周二和周三为大家讲解全同态加密
Dialogue: 0,0:20:50.08,0:20:55.72,Default,,0,0,0,,这是一个开创性的工作成果 我们可以用格实现传统密码学无法实现的全同态加密
Dialogue: 0,0:20:55.72,0:20:58.75,Default,,0,0,0,,此方案的设想是在20世纪90年代中期提出的 没人能想到这竟然可以实现
Dialogue: 0,0:20:58.75,0:21:04.86,Default,,0,0,0,,没人能想到我们可以利用格实现实现整数分解无法实现的一些密码学特性
Dialogue: 0,0:21:04.86,0:21:10.43,Default,,0,0,0,,以前学者们一直认为整数分解这类数论假设是最强的一类假设
Dialogue: 0,0:21:10.43,0:21:14.65,Default,,0,0,0,,但实际上格也可以实现很多功能
Dialogue: 0,0:21:14.65,0:21:21.23,Default,,0,0,0,,随着冬令营的进行 希望大家可以逐渐认同学习格密码学是很有价值的事情
Dialogue: 0,0:21:22.91,0:21:26.64,Default,,0,0,0,,我们来深入讲解一下这些特点
Dialogue: 0,0:21:28.80,0:21:31.15,Default,,0,0,0,,第一点是可证明安全性
Dialogue: 0,0:21:31.15,0:21:33.80,Default,,0,0,0,,正如我前面提到的 我们不能证明某些方案是绝对安全的
Dialogue: 0,0:21:33.80,0:21:38.06,Default,,0,0,0,,没人可以证明如果P等于NP 那么所有方案都可以被破解
Dialogue: 0,0:21:38.06,0:21:40.98,Default,,0,0,0,,那可证明安全又是什么呢？
Dialogue: 0,0:21:40.98,0:21:47.13,Default,,0,0,0,,可证明安全将密码学构造与一些我们认为可信的结论联系在了一起
Dialogue: 0,0:21:47.13,0:21:53.07,Default,,0,0,0,,可证明安全是一种归约算法 它将密码学方案的安全性归约到一个困难问题上
Dialogue: 0,0:21:53.07,0:21:58.70,Default,,0,0,0,,这个困难问题不是一大早你拍脑袋想出来的 而是一个新的、已确定困难的问题
Dialogue: 0,0:21:58.70,0:22:03.39,Default,,0,0,0,,我们把一系列密码学函数归约到这类困难问题上 这就是安全证明
Dialogue: 0,0:22:03.39,0:22:05.50,Default,,0,0,0,,我们希望利用安全证明来讨论方案的安全性
Dialogue: 0,0:22:06.24,0:22:11.93,Default,,0,0,0,,我后面可能就会提到 在很多情况下 安全性证明很有用
Dialogue: 0,0:22:11.93,0:22:19.18,Default,,0,0,0,,它告诉我们应该如何使用一个密码学方案 我后面还会提到这一点
Dialogue: 0,0:22:21.13,0:22:24.58,Default,,0,0,0,,安全性证明会告诉我们不要做哪些蠢事
Dialogue: 0,0:22:24.58,0:22:29.15,Default,,0,0,0,,它告诉我们如果可以破解密码学方案
Dialogue: 0,0:22:29.15,0:22:35.38,Default,,0,0,0,,如果存在一个攻击者以某个小概率破解密码学方案 就会发生一些奇特的事情
Dialogue: 0,0:22:35.38,0:22:42.52,Default,,0,0,0,,也就是我们的困难问题不再困难了 整个假设都被破解了
Dialogue: 0,0:22:42.52,0:22:48.78,Default,,0,0,0,,不光是你构造的算法不再安全 所有依赖于这一困难问题的密码学构造都不安全了
Dialogue: 0,0:22:48.78,0:22:52.36,Default,,0,0,0,,这是个非常好的结论 我们总希望能得到这样的结论
Dialogue: 0,0:22:52.36,0:22:59.87,Default,,0,0,0,,我们并不是经常能得到这样的结论 但格密码学可以得到更强的安全性结论
Dialogue: 0,0:22:59.87,0:23:01.42,Default,,0,0,0,,这是个非常好的特性
Dialogue: 0,0:23:01.42,0:23:04.57,Default,,0,0,0,,安全性证明会告诉我们所构造的方案没什么问题
Dialogue: 0,0:23:04.57,0:23:11.42,Default,,0,0,0,,如果你有一些疯狂的想法 想要去构造密码学方案 首先你需要得到安全性证明
Dialogue: 0,0:23:11.42,0:23:17.10,Default,,0,0,0,,能把所构造的方案与一个困难问题联系到一起 你就会知道你的想法是正确的
Dialogue: 0,0:23:17.10,0:23:22.67,Default,,0,0,0,,可能你忘记了加什么东西 因为不加或者不做某个运算 方案可能不安全
Dialogue: 0,0:23:22.67,0:23:25.85,Default,,0,0,0,,但是如果有安全证明的话 这种事情就不会发生
Dialogue: 0,0:23:25.85,0:23:33.24,Default,,0,0,0,,我们在周二会看到一个例子 方案并没有安全性证明 人们认为这个方案是安全的
Dialogue: 0,0:23:33.24,0:23:38.59,Default,,0,0,0,,人们构造了一个密码学方案 很长一段时间人们都认为它没什么问题
Dialogue: 0,0:23:38.59,0:23:41.63,Default,,0,0,0,,但实际上这个方案并没有和某个已确定困难的问题联系到一起
Dialogue: 0,0:23:41.63,0:23:43.31,Default,,0,0,0,,随后人们发现这方案有问题
Dialogue: 0,0:23:43.31,0:23:48.72,Default,,0,0,0,,我们会在后面提到这样的例子
Dialogue: 0,0:23:50.40,0:23:55.94,Default,,0,0,0,,另一个很棒的地方是 我后面可能会提到 我估计Chris在今天他的讲座中也会提到
Dialogue: 0,0:23:55.94,0:23:59.47,Default,,0,0,0,,安全性证明可以告诉我们如何选择方案的参数
Dialogue: 0,0:23:59.47,0:24:01.96,Default,,0,0,0,,这也和下面的一个特性相关
Dialogue: 0,0:24:01.96,0:24:10.64,Default,,0,0,0,,你有了一个密码学方案 但里面涉及一些参数 比如某些特定的数要大于其他数
Dialogue: 0,0:24:10.64,0:24:13.07,Default,,0,0,0,,大多数情况下 你可能不知道如何选取这些参数
Dialogue: 0,0:24:13.07,0:24:22.17,Default,,0,0,0,,但如果有安全性证明的话 它就会告诉你 如果安全性证明能通过 则m>n^2
Dialogue: 0,0:24:22.17,0:24:27.15,Default,,0,0,0,,所以你在使用方案的时候 会把m选为大于n^2的数 这样安全性证明才能过得去
Dialogue: 0,0:24:27.15,0:24:31.92,Default,,0,0,0,,密码学历史中也发生过这样的事情 Chris可能也会提到
Dialogue: 0,0:24:31.92,0:24:37.76,Default,,0,0,0,,我们证明了一个方案是安全的 安全性证明告诉我们 一部分参数要大于n^2
Dialogue: 0,0:24:37.76,0:24:42.20,Default,,0,0,0,,我们不知道为什么 但我们会说 用的时候就让这些参数大于n^2吧
Dialogue: 0,0:24:42.20,0:24:43.85,Default,,0,0,0,,那个时候我们还不知道为什么
Dialogue: 0,0:24:43.85,0:24:47.15,Default,,0,0,0,,但是5年以后 学者们提出了另一个算法 这个算法指出
Dialogue: 0,0:24:47.15,0:24:52.16,Default,,0,0,0,,如果这些参数小于n^2 我们可以在次指数时间内破解密码学方案
Dialogue: 0,0:24:52.16,0:24:54.40,Default,,0,0,0,,我估计Chris在今天他的讲座中也会提到这一点
Dialogue: 0,0:24:54.40,0:24:58.43,Default,,0,0,0,,大家可以看到安全性证明的威力了
Dialogue: 0,0:24:58.43,0:25:05.00,Default,,0,0,0,,它会告诉我们怎么做才是正确的 它会告诉我们是否走在了正确的道路上
Dialogue: 0,0:25:07.08,0:25:13.18,Default,,0,0,0,,我来举个例子 来看看安全性证明大概是个什么样子
Dialogue: 0,0:25:13.18,0:25:19.44,Default,,0,0,0,,这也会涉及到下面一个优点 也就是最糟糕情况 平均情况困难性这个优点上
Dialogue: 0,0:25:19.44,0:25:26.96,Default,,0,0,0,,这是个很简单的例子 是一个基于模平方的单向函数
Dialogue: 0,0:25:26.96,0:25:29.21,Default,,0,0,0,,这只是给大家解释下基本思想
Dialogue: 0,0:25:29.21,0:25:34.70,Default,,0,0,0,,假设你希望构造这样一个单向函数
Dialogue: 0,0:25:34.70,0:25:39.77,Default,,0,0,0,,这个单向函数是将输入值求平方 输入值为x 输出为x^2
Dialogue: 0,0:25:40.84,0:25:46.60,Default,,0,0,0,,我们就用它了 令N为两个大质数的乘积
Dialogue: 0,0:25:46.60,0:25:50.91,Default,,0,0,0,,我不知道如何选择参数N 后面几分钟我就会提到怎么选择参数N了
Dialogue: 0,0:25:50.91,0:25:54.49,Default,,0,0,0,,现在就选择某个N 这个N是两个大质数的乘积
Dialogue: 0,0:25:54.49,0:25:59.68,Default,,0,0,0,,现在考虑这个函数 求x的平方模N
Dialogue: 0,0:25:59.68,0:26:08.06,Default,,0,0,0,,在习题中 我会让大家试着证明如果想求这个函数的逆函数
Dialogue: 0,0:26:08.06,0:26:23.84,Default,,0,0,0,,也就是给定x^2 其中x是随机选取的 找到任意一个x' 使得x'^2=x^2
Dialogue: 0,0:26:23.84,0:26:31.72,Default,,0,0,0,,在习题中我们可以很容易证明 如果可以找到原像 你就可以分解整数N
Dialogue: 0,0:26:31.72,0:26:34.30,Default,,0,0,0,,这就是安全性证明的一个例子
Dialogue: 0,0:26:34.30,0:26:38.78,Default,,0,0,0,,它证明了如果你可以求逆函数 那么你就有更高的概率
Dialogue: 0,0:26:38.78,0:26:43.61,Default,,0,0,0,,可能有1%的概率 或者某个不能用代数式表示的概率下 你可以分解N
Dialogue: 0,0:26:43.61,0:26:47.84,Default,,0,0,0,,如果你不知道如何证明 或者没见过这个单向函数 试着想一想
Dialogue: 0,0:26:47.84,0:26:50.28,Default,,0,0,0,,我们实际上就是在证明这个单向函数的安全性
Dialogue: 0,0:26:50.28,0:26:52.94,Default,,0,0,0,,我们现在有了安全性证明 这很好
Dialogue: 0,0:26:52.94,0:26:59.28,Default,,0,0,0,,它证明了这个单向函数的安全性与整数分解相关 这是个挺不错的单向函数
Dialogue: 0,0:27:00.57,0:27:04.62,Default,,0,0,0,,但是这引入了另一个问题
Dialogue: 0,0:27:04.62,0:27:12.41,Default,,0,0,0,,这个函数 这个安全性证明叫做平均情况困难证明 基于平均情况困难性
Dialogue: 0,0:27:12.41,0:27:17.68,Default,,0,0,0,,基于平均情况困难性的原因是 我们没告诉你怎么选择N
Dialogue: 0,0:27:17.68,0:27:25.15,Default,,0,0,0,,你会问我如何选择N 我会告诉你N等于两个大质数的乘积
Dialogue: 0,0:27:25.15,0:27:26.98,Default,,0,0,0,,我们还需要知道其他一些限制条件吗？
Dialogue: 0,0:27:26.98,0:27:32.56,Default,,0,0,0,,大质数本身是不是要满足一些性质？是不是有所谓好的质数和不好的质数？
Dialogue: 0,0:27:32.56,0:27:37.38,Default,,0,0,0,,这好像不那么显然 可能没有什么直观的结论
Dialogue: 0,0:27:37.38,0:27:41.29,Default,,0,0,0,,这实际上是一个很严重的问题 一个大问题
Dialogue: 0,0:27:41.29,0:27:46.11,Default,,0,0,0,,这引发了下面的问题 也就是我们如何选择N
Dialogue: 0,0:27:46.11,0:27:53.16,Default,,0,0,0,,我们在RSA下看看这个问题 你想用代码实现一个RSA 如何选择参数模N？
Dialogue: 0,0:27:53.16,0:28:00.81,Default,,0,0,0,,如果你上过这方面的课程 你会知道 N不能是个偶数 偶数N不是个好选择
Dialogue: 0,0:28:00.81,0:28:07.32,Default,,0,0,0,,所以你估计会选择两个大质数 然后把它们乘起来 教科书上一般就讲到这里
Dialogue: 0,0:28:07.32,0:28:11.05,Default,,0,0,0,,但有可能某些质数比其他质数好？大家觉得呢？
Dialogue: 0,0:28:13.10,0:28:15.58,Default,,0,0,0,,你觉得什么质数算是个好质数？
Dialogue: 0,0:28:19.95,0:28:21.48,Default,,0,0,0,,安全质数？
Dialogue: 0,0:28:22.97,0:28:25.58,Default,,0,0,0,,还有什么答案吗？
Dialogue: 0,0:28:25.58,0:28:29.04,Default,,0,0,0,,这是个好问题 我们其实不知道这个问题的答案是什么
Dialogue: 0,0:28:29.04,0:28:32.80,Default,,0,0,0,,让我来告诉你历史上发生了什么事情
Dialogue: 0,0:28:35.47,0:28:39.15,Default,,0,0,0,,1978年 学者们开始研究整数分解算法了
Dialogue: 0,0:28:39.15,0:28:45.45,Default,,0,0,0,,那时候RSA出现了 人们意识到整数分解是一个重要问题 试着寻找整数分解算法
Dialogue: 0,0:28:45.45,0:28:51.31,Default,,0,0,0,,1978年 学者们发现存在一个高效的算法分解整数
Dialogue: 0,0:28:51.31,0:28:56.52,Default,,0,0,0,,前提是p-1或者q-1的最大质因子要比较小
Dialogue: 0,0:28:56.52,0:29:00.91,Default,,0,0,0,,所以人们说 如果你让RSA抵御这类攻击的话
Dialogue: 0,0:29:00.91,0:29:09.93,Default,,0,0,0,,你需要选择p和q 使得p-1和q-1的最大质因子比较大 不能太小
Dialogue: 0,0:29:09.93,0:29:19.94,Default,,0,0,0,,于是在1978年 你在代码里面增加了一个检查机制 检查p和q是不是满足条件
Dialogue: 0,0:29:19.94,0:29:26.44,Default,,0,0,0,,接下来 1981年又出来另一篇论文 对于另一个特定情况又有了另一个算法
Dialogue: 0,0:29:26.44,0:29:31.52,Default,,0,0,0,,p+1和q+1需要有比较大的质因子
Dialogue: 0,0:29:31.52,0:29:36.92,Default,,0,0,0,,很好 你又增加了一行代码 保证p和q也满足这样的条件
Dialogue: 0,0:29:36.92,0:29:41.15,Default,,0,0,0,,又过了1年 又出来了一篇论文
Dialogue: 0,0:29:41.15,0:29:51.48,Default,,0,0,0,,如果p-1和q-1的最大质因子是p'和q' 那么p'-1和q'-1也要有大的质因子
Dialogue: 0,0:29:51.48,0:29:53.45,Default,,0,0,0,,好的 你再检查下这个是否成立
Dialogue: 0,0:29:54.12,0:29:56.30,Default,,0,0,0,,大家估计可以猜到接下来发生什么了吧？
Dialogue: 0,0:29:56.30,0:30:02.51,Default,,0,0,0,,1984年 学者们发现如果p+1和q+1的最大质因子是p'和q'
Dialogue: 0,0:30:02.51,0:30:09.71,Default,,0,0,0,,则p'-1和q'-1也需要有比较大的质因子
Dialogue: 0,0:30:09.71,0:30:18.12,Default,,0,0,0,,大家估计没听说过有这么个历程 原因是我们现在有了更高效的大整数分解算法
Dialogue: 0,0:30:18.12,0:30:26.44,Default,,0,0,0,,我们发现了数筛法 所以现在这4个要求已经没这么重要了
Dialogue: 0,0:30:26.44,0:30:28.59,Default,,0,0,0,,我们已经有了更高效的整数分解算法
Dialogue: 0,0:30:28.59,0:30:36.62,Default,,0,0,0,,对于所有N等于p乘以q的形式 上面这4个算法的效率和数筛法效率差不多
Dialogue: 0,0:30:36.62,0:30:40.70,Default,,0,0,0,,可能对于不同的p'和q' 整数分解的效率还是会有所不同
Dialogue: 0,0:30:40.70,0:30:42.68,Default,,0,0,0,,但是我想这不会意味着故事的结束
Dialogue: 0,0:30:42.68,0:30:49.02,Default,,0,0,0,,我不是一个数论专家 但我估计在接下来几年 学者们可能会提出更高效的算法
Dialogue: 0,0:30:49.02,0:30:54.99,Default,,0,0,0,,我相信我们要根据所提出的算法 选择更为特殊的质数
Dialogue: 0,0:30:54.99,0:30:59.34,Default,,0,0,0,,这确实是一个问题 我们该如何选择参数N
Dialogue: 0,0:30:59.34,0:31:05.28,Default,,0,0,0,,为什么会有这样一个问题？问题出在安全性证明上面
Dialogue: 0,0:31:05.28,0:31:12.43,Default,,0,0,0,,安全证明称如果能破解RSA 并不意味着能分解所有的整数
Dialogue: 0,0:31:12.43,0:31:17.77,Default,,0,0,0,,只意味着能分解某个特定的整数 但不意味着能分解所有的整数
Dialogue: 0,0:31:17.77,0:31:23.61,Default,,0,0,0,,只能分解一个特定的N 不是所有的N 只是一个特定的N
Dialogue: 0,0:31:23.61,0:31:26.56,Default,,0,0,0,,这就是所谓的平均情况困难性
Dialogue: 0,0:31:26.56,0:31:31.96,Default,,0,0,0,,所以如果你相信破解RSA 或者破解其他基于整数分解问题的方案是困难的
Dialogue: 0,0:31:31.96,0:31:36.91,Default,,0,0,0,,你相信的是在平均情况下 整数分解是困难的
Dialogue: 0,0:31:36.91,0:31:47.63,Default,,0,0,0,,你需要相信的并不是所有整数分解都是困难的 只相信一部分整数分解是困难的
Dialogue: 0,0:31:47.63,0:31:57.60,Default,,0,0,0,,我们这里假设的是 可能有1%的数是容易分解的 这1%的RSA方案是可以破解的
Dialogue: 0,0:31:57.60,0:32:01.05,Default,,0,0,0,,但是在最糟糕情况下 整数分解还是困难的
Dialogue: 0,0:32:01.05,0:32:04.11,Default,,0,0,0,,所以可能我们对某些特定的数可以很快进行整数分解 但不是全部的数
Dialogue: 0,0:32:04.11,0:32:09.66,Default,,0,0,0,,这确实是一直困扰我们的一个问题 但格里面没有这样的问题
Dialogue: 0,0:32:09.66,0:32:15.60,Default,,0,0,0,,这是一个重要的核心优点 格困难问题是最糟糕情况困难问题
Dialogue: 0,0:32:15.60,0:32:18.94,Default,,0,0,0,,我们从密码学函数的角度再理解一下
Dialogue: 0,0:32:18.94,0:32:23.21,Default,,0,0,0,,如果你基于平均情况困难性进行安全性证明 你得到的是类似于这样的映射关系
Dialogue: 0,0:32:23.21,0:32:28.98,Default,,0,0,0,,你选择了这个参数N 右边你就得到了一个基于N的密码学函数
Dialogue: 0,0:32:28.98,0:32:35.15,Default,,0,0,0,,这有点像双射 有点像一对一映射
Dialogue: 0,0:32:35.15,0:32:43.05,Default,,0,0,0,,对于每个N 你都证明了存在一个相同的N所对应的密码学函数
Dialogue: 0,0:32:43.05,0:32:46.83,Default,,0,0,0,,如果密码学函数被破解了 你就能分解这个N
Dialogue: 0,0:32:46.83,0:32:49.50,Default,,0,0,0,,确实有点像一对一双射
Dialogue: 0,0:32:49.50,0:32:59.56,Default,,0,0,0,,如果你突然发现密码学方案被破解了 这就意味着1%的密码学方案也被破解了
Dialogue: 0,0:32:59.56,0:33:08.08,Default,,0,0,0,,你得到的只是N中1%的数可以被分解
Dialogue: 0,0:33:08.08,0:33:12.58,Default,,0,0,0,,不是能分解所有的数 只意味着能分解1%的数
Dialogue: 0,0:33:12.58,0:33:19.18,Default,,0,0,0,,而在格中我们可以得到更好的结论
Dialogue: 0,0:33:19.18,0:33:21.10,Default,,0,0,0,,这就是所谓的最糟糕情况困难性
Dialogue: 0,0:33:21.10,0:33:24.06,Default,,0,0,0,,什么是最糟糕情况困难性？
Dialogue: 0,0:33:24.06,0:33:35.34,Default,,0,0,0,,安全性归约 或者说安全证明更像是一个完全映射
Dialogue: 0,0:33:35.34,0:33:47.76,Default,,0,0,0,,在左边选择一个任意的格 把它映射到右边 它会映射到右边所有的密码学函数
Dialogue: 0,0:33:47.76,0:33:49.29,Default,,0,0,0,,这个映射关系非常令人惊讶
Dialogue: 0,0:33:49.29,0:33:53.29,Default,,0,0,0,,下一个讲座中 Vadim将为大家讲解这是如何做到的 很神奇
Dialogue: 0,0:33:53.29,0:33:57.87,Default,,0,0,0,,这就是最糟糕情况困难的主要思想
Dialogue: 0,0:33:57.87,0:34:09.96,Default,,0,0,0,,从某种程度上 你将任意一个格困难问题都映射到了密码学函数的整个空间里面
Dialogue: 0,0:34:09.96,0:34:10.89,Default,,0,0,0,,这非常令人惊奇
Dialogue: 0,0:34:10.89,0:34:28.18,Default,,0,0,0,,这也意味着 如果1%的密码学函数被破解了 则任意一个格问题实例都可以被解决
Dialogue: 0,0:34:29.37,0:34:31.08,Default,,0,0,0,,从很多方面看 这都是一个很好的性质
Dialogue: 0,0:34:31.08,0:34:34.73,Default,,0,0,0,,首先 这使得安全性强度更高了
Dialogue: 0,0:34:35.69,0:34:43.36,Default,,0,0,0,,不光是安全性强度更高了 而且它也告诉我们 不需要担心如何选择参数N了
Dialogue: 0,0:34:43.36,0:34:52.43,Default,,0,0,0,,你不需要担心如何选择所涉及到的参数 只要按照某个分布选参数就可以了
Dialogue: 0,0:34:52.43,0:34:55.92,Default,,0,0,0,,安全证明会告诉你如何选取参数 你只要这么选就好了
Dialogue: 0,0:34:55.92,0:34:59.87,Default,,0,0,0,,不需要担心哪个是好的N 哪个是不好的N
Dialogue: 0,0:34:59.87,0:35:05.54,Default,,0,0,0,,安全性证明会告诉你如何正确选取参数的
Dialogue: 0,0:35:08.16,0:35:17.56,Default,,0,0,0,,我这里要强调一下 这是格的简介讲座 这只是一个简单的介绍
Dialogue: 0,0:35:17.56,0:35:28.49,Default,,0,0,0,,在进入技术部分的讲解前 我们要再讲一讲历史 在最近15年中又发生了什么？
Dialogue: 0,0:35:28.49,0:35:34.06,Default,,0,0,0,,正如我前面所说的 Ajtai和Ajtai-Dwork在1996年开创性地提出了格密码学
Dialogue: 0,0:35:34.06,0:35:39.16,Default,,0,0,0,,他们意识到我们可以做很多很棒的事情 我们可以使用格做很多很棒的事情
Dialogue: 0,0:35:39.52,0:35:45.48,Default,,0,0,0,,他们告诉我们如何实现单向函数 如何实现公钥密码学系统
Dialogue: 0,0:35:45.48,0:35:50.57,Default,,0,0,0,,但是他们只提出了一个概念指出这些是可以用格来实现的
Dialogue: 0,0:35:50.57,0:35:53.69,Default,,0,0,0,,他们也指出如何得到最糟糕情况安全性
Dialogue: 0,0:35:54.89,0:35:59.54,Default,,0,0,0,,但从性能方便考虑的话 他们构造的方案效率非常低
Dialogue: 0,0:35:59.98,0:36:07.15,Default,,0,0,0,,如果使用他们所提出的系统 密钥可能是GB级的
Dialogue: 0,0:36:07.15,0:36:10.34,Default,,0,0,0,,性能实在不太好 运算效率很低 很麻烦
Dialogue: 0,0:36:10.34,0:36:14.78,Default,,0,0,0,,我认为他们的构造更多地是从理论的角度考虑的
Dialogue: 0,0:36:14.78,0:36:18.80,Default,,0,0,0,,但是 最近几年 格密码学有了翻天覆地的变化
Dialogue: 0,0:36:19.45,0:36:24.17,Default,,0,0,0,,现在我们已经得到了非常高效的格密码学方案
Dialogue: 0,0:36:24.17,0:36:27.72,Default,,0,0,0,,其效率甚至可以与RSA比拟
Dialogue: 0,0:36:29.24,0:36:36.49,Default,,0,0,0,,开始时方案看起来根本没法用 也没什么可扩展的能力 只能做公钥密码学系统
Dialogue: 0,0:36:36.49,0:36:45.56,Default,,0,0,0,,而且绝大多数公钥密码学系统的构造都很繁琐
Dialogue: 0,0:36:45.56,0:36:53.54,Default,,0,0,0,,仅获得选择明文安全性已经非常困难了 而且几乎没有任何可扩展性
Dialogue: 0,0:36:53.54,0:36:59.63,Default,,0,0,0,,随后Louis和Warick试着定义格密码学系统 延伸这个思想
Dialogue: 0,0:36:59.63,0:37:04.34,Default,,0,0,0,,最近几年 学者们集中研究格密码学的两个核心问题
Dialogue: 0,0:37:04.34,0:37:07.16,Default,,0,0,0,,这两个核心问题也是接下来两个讲座的主要内容
Dialogue: 0,0:37:07.16,0:37:10.68,Default,,0,0,0,,Vadim会讲到Short Integer Solution问题
Dialogue: 0,0:37:10.68,0:37:13.74,Default,,0,0,0,,Chris会讲到Learning With Errors问题
Dialogue: 0,0:37:13.74,0:37:24.97,Default,,0,0,0,,用这两个问题可以构造非常高效的密码学方案 非常高效的单向函数
Dialogue: 0,0:37:24.97,0:37:28.24,Default,,0,0,0,,而且这两个问题把格的一些内容抽象化了
Dialogue: 0,0:37:28.24,0:37:34.41,Default,,0,0,0,,当你设计格密码学系统的时候 你不需要去考虑最糟糕情况困难性的安全性证明
Dialogue: 0,0:37:34.41,0:37:40.30,Default,,0,0,0,,你只需要基于SIS、LWE这两个中间问题构造方案就可以了
Dialogue: 0,0:37:40.30,0:37:45.44,Default,,0,0,0,,有人已经帮你们把最困难的问题解决了 帮你们完成了最糟糕情况证明
Dialogue: 0,0:37:45.44,0:37:49.28,Default,,0,0,0,,你只需要选一个问题 用这个问题构造密码学系统就好了
Dialogue: 0,0:37:49.28,0:37:53.69,Default,,0,0,0,,当然这方面还有很多工作要做 但至少一部分工作已经完成了
Dialogue: 0,0:37:53.69,0:37:56.40,Default,,0,0,0,,这些将是后面两个讲座的主题
Dialogue: 0,0:37:56.40,0:38:00.16,Default,,0,0,0,,这就是近几年格密码学的研究主线
Dialogue: 0,0:38:00.67,0:38:06.16,Default,,0,0,0,,同时 格密码学还有另一个研究主线 我想大家在周二的时候会学习到
Dialogue: 0,0:38:06.16,0:38:08.36,Default,,0,0,0,,Vadim会在周二的讲座中讲到
Dialogue: 0,0:38:08.36,0:38:11.64,Default,,0,0,0,,这个主线所构造的密码学方案非常高效
Dialogue: 0,0:38:11.64,0:38:15.68,Default,,0,0,0,,我不得不说 这类格密码学方案实在是太高效了
Dialogue: 0,0:38:16.52,0:38:25.38,Default,,0,0,0,,他们是基于特定格代数结构而构造的 这两个问题被称为Ring-LWE以及Ring-SIS
Dialogue: 0,0:38:25.38,0:38:29.00,Default,,0,0,0,,2002年Micciancio开创了这一领域
Dialogue: 0,0:38:29.00,0:38:35.15,Default,,0,0,0,,2006年Chris Peikert、Alon Rosen、Lyrubashevsky和Micciancio进行扩展
Dialogue: 0,0:38:35.15,0:38:44.22,Default,,0,0,0,,他们意识到如果不考虑一般格 只考虑循环格这种满足特定性质的格代数结构
Dialogue: 0,0:38:44.22,0:38:48.91,Default,,0,0,0,,就可以大幅度提高方案的效率 构造安全高效的密码学方案
Dialogue: 0,0:38:48.91,0:38:53.31,Default,,0,0,0,,而且所构造的密码学方案确实非常高效
Dialogue: 0,0:38:53.31,0:38:59.96,Default,,0,0,0,,我不会讲解太多这方面的内容 不过大家可以感受一下
Dialogue: 0,0:39:01.77,0:39:06.91,Default,,0,0,0,,密钥的长度是KB级的 而计算效率甚至可以和哈希函数的计算效率接近了
Dialogue: 0,0:39:06.91,0:39:10.09,Default,,0,0,0,,我想Vadim会在周二详细讲解这方面的内容
Dialogue: 0,0:39:10.09,0:39:13.50,Default,,0,0,0,,这就是格的简介部分
Dialogue: 0,0:39:13.50,0:39:17.60,Default,,0,0,0,,在进入技术部分的讲解之前 大家准备好 很烧脑
Dialogue: 0,0:39:17.60,0:39:19.34,Default,,0,0,0,,有什么问题吗？
Dialogue: 0,0:39:22.30,0:39:23.47,Default,,0,0,0,,没有问题
Dialogue: 0,0:39:25.18,0:39:27.71,Default,,0,0,0,,请问？
Dialogue: 0,0:39:38.68,0:39:43.31,Default,,0,0,0,,问题是格问题到底有多难 比如最短向量问题有多难
Dialogue: 0,0:39:43.31,0:39:47.95,Default,,0,0,0,,我在下面的技术部分讲到这些内容 你会看到更多这方面的内容
Dialogue: 0,0:39:47.95,0:39:50.48,Default,,0,0,0,,我们会来看看我们在使用什么样的困难问题
Dialogue: 0,0:39:50.48,0:39:52.86,Default,,0,0,0,,如果到时候我忘了回答你刚才的问题的话 提醒我一下
